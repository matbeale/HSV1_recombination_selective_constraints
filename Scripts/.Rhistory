geom_point(alpha=0.5) +
theme_bw() +
labs(x=paste0(current.pair[1]," Alt Variant Frequency (%)"), y=paste0(current.pair[2]," Alt Variant Frequency (%)"))
ggplot(myvar.minor.change.plotting, aes(Seq1,Seq2)) +
geom_point(alpha=0.5) +
theme_bw() +
coord_cartesian(xlim=c(0,100), y=c(0,100)) +
labs(x=paste0(current.pair[1]," Alt Variant Frequency (%)"), y=paste0(current.pair[2]," Alt Variant Frequency (%)"))
linked.vcf.dir
p.minor.scatter <- ggplot(myvar.minor.change.plotting, aes(Seq1,Seq2)) +
geom_point(alpha=0.5) +
theme_bw() +
coord_cartesian(xlim=c(0,100), y=c(0,100)) +
labs(x=paste0(current.pair[1]," Alt Variant Frequency (%)"), y=paste0(current.pair[2]," Alt Variant Frequency (%)"))
#Cairo(file= paste(linked.vcf.dir,"HSV1_","Pair3","_MinorVarSites.svg", sep=""), width = 700, height = 300, type="svg", units = "pt")
Cairo(file= paste(linked.vcf.dir,"HSV1_","Pair1","_MinorVarSites_scattergraph.png", sep=""), width = 300, height = 300, type="png",dpi=600, units = "pt")
p.minor
dev.off()
linked.vcf.dir
#Cairo(file= paste(linked.vcf.dir,"HSV1_","Pair3","_MinorVarSites.svg", sep=""), width = 700, height = 300, type="svg", units = "pt")
Cairo(file= paste(linked.vcf.dir,"HSV1_","Pair1","_MinorVarSites_scattergraph.png", sep=""), width = 300, height = 300, type="png",dpi=600, units = "pt")
p.minor.scatter
dev.off()
# Plot frequency scatter
current.pair <- Pair2
current.pair <- gsub("HSV1\\-nCSF","SWAB",current.pair)
current.pair <- gsub("HSV1\\-CSF","CSF",current.pair)
myvar.minor.change.plotting <- myvar.minor.change[,c(1,3,5)]
colnames(myvar.minor.change.plotting) <- c("Position","Seq1","Seq2")
p.minor.scatter <- ggplot(myvar.minor.change.plotting, aes(Seq1,Seq2)) +
geom_point(alpha=0.5) +
theme_bw() +
coord_cartesian(xlim=c(0,100), y=c(0,100)) +
labs(x=paste0(current.pair[1]," Alt Variant Frequency (%)"), y=paste0(current.pair[2]," Alt Variant Frequency (%)"))
p.minor.scatter
for (currentseq in Pair2) {
#vcf <- readVcf(paste("C:/Bioinformatics/HSV1_genomes/annotation/snippy_0.5-cutoff/MinorVars/Linked_Pairs/",currentseq,"-freebayes.5-reads.vcf",sep=""),"NC_001806.2_HSV1_s17")
vcf <- readVcf(paste(linked.vcf.dir,currentseq,"-freebayes.5-reads.vcf",sep=""),"NC_001806.2_HSV1_s17")
myvcf <- data.frame(info(vcf))
myvcf$position <- as.numeric(gsub("\\_.+$","",gsub("^.+\\:","", rownames(myvcf),perl=T), perl=T))
myvcf <- myvcf[,c("position","NS","DP","AN","RO","AO","SRF","SRR","SAF","SAR")]
colnames(myvcf)[c(3:6)] <- c("Depth","Alleles","RefCount","AltCount")
myvcf$keep <- sapply(1:nrow(myvcf), function(x) ifelse((grepl(",",myvcf$AltCount[x]) ),"drop","keep"))
myvcf$keep <- sapply(1:nrow(myvcf), function(x) ifelse((grepl(",",myvcf$RefCount[x]) ),"drop",myvcf$keep[x]))
myvcf <- subset(myvcf,keep=="keep", select=c(1:ncol(myvcf)-1))
myvcf$Depth2 <- sapply(1:nrow(myvcf), function(x) sum(as.numeric(myvcf$RefCount[x]), as.numeric(myvcf$AltCount[x]))) # depth provided in VCF is missing some reads, so recalculate this
myvcf$refper <- round(((as.numeric(myvcf$RefCount)/as.numeric(myvcf$Depth2))*100),1)
myvcf$altper <- round(((as.numeric(myvcf$AltCount)/as.numeric(myvcf$Depth2))*100),1)
# Produce filter to keep if >50% alt variant
myvcf.minors <- myvcf # keep a backup for pulling out minor vars
myvcf$vartype <- sapply(1:nrow(myvcf), function(x) ifelse(myvcf$altper[x] >=50, "alt","ref" ))
myvcf <- subset(myvcf, vartype=="alt")
# Modify filter to remove minor vars with low coverage
myvcf$vartype <- sapply(1:nrow(myvcf), function(x) ifelse(as.numeric(myvcf$AltCount[x]) <5, "drop",myvcf$vartype[x]))
myvcf <- subset(myvcf, vartype=="alt")
# Add in filter to remove variants not covered by at least one read on each strand
myvcf$vartype <- sapply(1:nrow(myvcf), function(x) ifelse(as.numeric(myvcf$SAF[x]) <1, "drop",myvcf$vartype[x]))
myvcf$vartype <- sapply(1:nrow(myvcf), function(x) ifelse(as.numeric(myvcf$SAR[x]) <1, "drop",myvcf$vartype[x]))
myvcf <- subset(myvcf, vartype=="alt")
# Go back to earlier saved version and produce filter to remove "major variant sites"
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(myvcf.minors$refper[x] >= 98 || myvcf.minors$altper[x] >=98, "major","minor" ))
myvcf.minors <- subset(myvcf.minors, vartype=="minor")
# Modify filter to remove minor vars with low coverage
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$RefCount[x]) <5, "drop",myvcf.minors$vartype[x]))
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$AltCount[x]) <5, "drop",myvcf.minors$vartype[x]))
myvcf.minors <- subset(myvcf.minors, vartype=="minor")
myvcf.minors$majorfreq <- sapply(1:nrow(myvcf.minors), function (x) max(c(as.numeric(myvcf.minors$refper[x]) ,as.numeric(myvcf.minors$altper[x]))))
myvcf.minors$minorfreq <- sapply(1:nrow(myvcf.minors), function (x) min(c(as.numeric(myvcf.minors$refper[x]) ,as.numeric(myvcf.minors$altper[x]))))
# Add in filter to remove minor variants not covered by at least one read on each strand
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$SRF[x]) <1, "drop",myvcf.minors$vartype[x]))
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$SRR[x]) <1, "drop",myvcf.minors$vartype[x]))
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$SAF[x]) <1, "drop",myvcf.minors$vartype[x]))
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$SAR[x]) <1, "drop",myvcf.minors$vartype[x]))
myvcf.minors <- subset(myvcf.minors, vartype=="minor")
# Add test of strand bias, and remove variants that that fail test
#strandbias.cuttoff <- 0.1
#myvcf.minors$RefStrBias <- sapply(1:nrow(myvcf.minors), function(x) round(as.numeric(as.numeric(myvcf.minors$SRF[x])/sum(as.numeric(myvcf.minors$SRF[x]),as.numeric(myvcf.minors$SRR[x]))),2))
#myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$RefStrBias[x]) < strandbias.cuttoff || as.numeric(myvcf.minors$RefStrBias[x]) >1-strandbias.cuttoff, "drop",myvcf.minors$vartype[x]))
#myvcf.minors$AltStrBias <- sapply(1:nrow(myvcf.minors), function(x) round(as.numeric(as.numeric(myvcf.minors$SAF[x])/sum(as.numeric(myvcf.minors$SAF[x]),as.numeric(myvcf.minors$SAR[x]))),2))
#myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$AltStrBias[x]) < strandbias.cuttoff || as.numeric(myvcf.minors$AltStrBias[x]) >>1-strandbias.cuttoff, "drop",myvcf.minors$vartype[x]))
#myvcf.minors <- subset(myvcf.minors, vartype=="minor", select=-c(RefStrBias,AltStrBias))
# Now bring Major and Minor Vars back together
myvar.called <- data.frame(myvcf[,c("position","altper")],stringsAsFactors = F)
colnames(myvar.called)[ncol(myvar.called)] <- currentseq
myvar.collating <- merge(myvar.collating,myvar.called, by.x="position",by.y="position",all.x=T)
myvar.collating[ncol(myvar.collating)] <- sapply(1:nrow(myvar.collating), function(x) ifelse(is.na(myvar.collating[x,ncol(myvar.collating)]),0,1))
myvcf.minors.called <- data.frame(myvcf.minors[,c("position","altper")],stringsAsFactors = F)
colnames(myvcf.minors.called)[ncol(myvcf.minors.called)] <- paste(currentseq,".altper", sep="")
myvar.collating <- merge(myvar.collating,myvcf.minors.called, by.x="position",by.y="position",all.x=T)
}
# strip out positions without any variants in dataset
myvar.collating[is.na(myvar.collating)]<- 0
myvar.collating$keep <- sapply(1:nrow(myvar.collating), function(x) sum(myvar.collating[x,2:ncol(myvar.collating)]))
myvar.collating <- subset(myvar.collating, keep>0, select=-keep)
nrow(myvar.collating)
# Identify any sites where the consensus changes
myvar.cons.change <- myvar.collating
myvar.cons.change$keep <- sapply(1:nrow(myvar.cons.change), function (x) sum(myvar.cons.change[x,grep("altper",colnames(myvar.cons.change), invert=T)[-1]]))
myvar.cons.change <- subset(myvar.cons.change, keep==1, select=-keep)
#myvar.cons.change <- subset(myvar.cons.change, keep!=3, select=-keep)
#myvar.cons.change <- subset(myvar.cons.change, keep!=0, select=-keep)
nrow(myvar.cons.change)
# Keep only sites with minor variants
myvar.minor.change <- myvar.collating
myvar.minor.change$keep <- sapply(1:nrow(myvar.minor.change), function (x) sum(myvar.minor.change[x,grep("altper",colnames(myvar.minor.change))]))
myvar.minor.change <- subset(myvar.minor.change, keep!=0, select=-keep)
# Now try and plot
myvar.minor.melt <- myvar.minor.change[,c(1,grep("altper",colnames(myvar.minor.change)))]
colnames(myvar.minor.melt) <- gsub(".altper","",colnames(myvar.minor.melt))
myvar.minor.melt <- melt(myvar.minor.melt, id.vars="position")
myvar.minor.melt$position <- as.factor(myvar.minor.melt$position)
# rename nCSF as SWAB
myvar.minor.melt$variable <- gsub("nCSF","SWAB",myvar.minor.melt$variable)
p.minor <- ggplot(myvar.minor.melt, aes(position,value, group=variable,  fill=variable))
p.minor <- p.minor + geom_bar(stat="identity") + theme_bw() +
facet_grid(variable ~ ., scales="free", space="free", drop=T, margins=F) +
labs(x="Variant position",y="Alt Variant Frequency (%)") + coord_cartesian(ylim=c(2,100)) +
theme(axis.text.x = element_text(angle = 90, hjust = 0.5, vjust=0.5), legend.position="none",
strip.background = element_rect(fill="white"))
#Cairo(file= paste(linked.vcf.dir,"HSV1_","Pair1","_MinorVarSites.png", sep=""), width = 700, height = 300, type="png",dpi=600, units = "pt")
p.minor
genomelength <- 152222
myvar.collating <- data.frame(c(1:genomelength),stringsAsFactors = F)
colnames(myvar.collating) <- "position"
for (currentseq in Pair2) {
#vcf <- readVcf(paste("C:/Bioinformatics/HSV1_genomes/annotation/snippy_0.5-cutoff/MinorVars/Linked_Pairs/",currentseq,"-freebayes.5-reads.vcf",sep=""),"NC_001806.2_HSV1_s17")
vcf <- readVcf(paste(linked.vcf.dir,currentseq,"-freebayes.5-reads.vcf",sep=""),"NC_001806.2_HSV1_s17")
myvcf <- data.frame(info(vcf))
myvcf$position <- as.numeric(gsub("\\_.+$","",gsub("^.+\\:","", rownames(myvcf),perl=T), perl=T))
myvcf <- myvcf[,c("position","NS","DP","AN","RO","AO","SRF","SRR","SAF","SAR")]
colnames(myvcf)[c(3:6)] <- c("Depth","Alleles","RefCount","AltCount")
myvcf$keep <- sapply(1:nrow(myvcf), function(x) ifelse((grepl(",",myvcf$AltCount[x]) ),"drop","keep"))
myvcf$keep <- sapply(1:nrow(myvcf), function(x) ifelse((grepl(",",myvcf$RefCount[x]) ),"drop",myvcf$keep[x]))
myvcf <- subset(myvcf,keep=="keep", select=c(1:ncol(myvcf)-1))
myvcf$Depth2 <- sapply(1:nrow(myvcf), function(x) sum(as.numeric(myvcf$RefCount[x]), as.numeric(myvcf$AltCount[x]))) # depth provided in VCF is missing some reads, so recalculate this
myvcf$refper <- round(((as.numeric(myvcf$RefCount)/as.numeric(myvcf$Depth2))*100),1)
myvcf$altper <- round(((as.numeric(myvcf$AltCount)/as.numeric(myvcf$Depth2))*100),1)
# Produce filter to keep if >50% alt variant
myvcf.minors <- myvcf # keep a backup for pulling out minor vars
myvcf$vartype <- sapply(1:nrow(myvcf), function(x) ifelse(myvcf$altper[x] >=50, "alt","ref" ))
myvcf <- subset(myvcf, vartype=="alt")
# Modify filter to remove minor vars with low coverage
myvcf$vartype <- sapply(1:nrow(myvcf), function(x) ifelse(as.numeric(myvcf$AltCount[x]) <5, "drop",myvcf$vartype[x]))
myvcf <- subset(myvcf, vartype=="alt")
# Add in filter to remove variants not covered by at least one read on each strand
myvcf$vartype <- sapply(1:nrow(myvcf), function(x) ifelse(as.numeric(myvcf$SAF[x]) <1, "drop",myvcf$vartype[x]))
myvcf$vartype <- sapply(1:nrow(myvcf), function(x) ifelse(as.numeric(myvcf$SAR[x]) <1, "drop",myvcf$vartype[x]))
myvcf <- subset(myvcf, vartype=="alt")
# Go back to earlier saved version and produce filter to remove "major variant sites"
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(myvcf.minors$refper[x] >= 98 || myvcf.minors$altper[x] >=98, "major","minor" ))
myvcf.minors <- subset(myvcf.minors, vartype=="minor")
# Modify filter to remove minor vars with low coverage
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$RefCount[x]) <5, "drop",myvcf.minors$vartype[x]))
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$AltCount[x]) <5, "drop",myvcf.minors$vartype[x]))
myvcf.minors <- subset(myvcf.minors, vartype=="minor")
myvcf.minors$majorfreq <- sapply(1:nrow(myvcf.minors), function (x) max(c(as.numeric(myvcf.minors$refper[x]) ,as.numeric(myvcf.minors$altper[x]))))
myvcf.minors$minorfreq <- sapply(1:nrow(myvcf.minors), function (x) min(c(as.numeric(myvcf.minors$refper[x]) ,as.numeric(myvcf.minors$altper[x]))))
# Add in filter to remove minor variants not covered by at least one read on each strand
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$SRF[x]) <1, "drop",myvcf.minors$vartype[x]))
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$SRR[x]) <1, "drop",myvcf.minors$vartype[x]))
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$SAF[x]) <1, "drop",myvcf.minors$vartype[x]))
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$SAR[x]) <1, "drop",myvcf.minors$vartype[x]))
myvcf.minors <- subset(myvcf.minors, vartype=="minor")
# Add test of strand bias, and remove variants that that fail test
#strandbias.cuttoff <- 0.1
#myvcf.minors$RefStrBias <- sapply(1:nrow(myvcf.minors), function(x) round(as.numeric(as.numeric(myvcf.minors$SRF[x])/sum(as.numeric(myvcf.minors$SRF[x]),as.numeric(myvcf.minors$SRR[x]))),2))
#myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$RefStrBias[x]) < strandbias.cuttoff || as.numeric(myvcf.minors$RefStrBias[x]) >1-strandbias.cuttoff, "drop",myvcf.minors$vartype[x]))
#myvcf.minors$AltStrBias <- sapply(1:nrow(myvcf.minors), function(x) round(as.numeric(as.numeric(myvcf.minors$SAF[x])/sum(as.numeric(myvcf.minors$SAF[x]),as.numeric(myvcf.minors$SAR[x]))),2))
#myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$AltStrBias[x]) < strandbias.cuttoff || as.numeric(myvcf.minors$AltStrBias[x]) >>1-strandbias.cuttoff, "drop",myvcf.minors$vartype[x]))
#myvcf.minors <- subset(myvcf.minors, vartype=="minor", select=-c(RefStrBias,AltStrBias))
# Now bring Major and Minor Vars back together
myvar.called <- data.frame(myvcf[,c("position","altper")],stringsAsFactors = F)
colnames(myvar.called)[ncol(myvar.called)] <- currentseq
myvar.collating <- merge(myvar.collating,myvar.called, by.x="position",by.y="position",all.x=T)
myvar.collating[ncol(myvar.collating)] <- sapply(1:nrow(myvar.collating), function(x) ifelse(is.na(myvar.collating[x,ncol(myvar.collating)]),0,1))
myvcf.minors.called <- data.frame(myvcf.minors[,c("position","altper")],stringsAsFactors = F)
colnames(myvcf.minors.called)[ncol(myvcf.minors.called)] <- paste(currentseq,".altper", sep="")
myvar.collating <- merge(myvar.collating,myvcf.minors.called, by.x="position",by.y="position",all.x=T)
}
Pair2 <- c("HSV1-nCSF10","HSV1-nCSF9")
genomelength <- 152222
myvar.collating <- data.frame(c(1:genomelength),stringsAsFactors = F)
colnames(myvar.collating) <- "position"
for (currentseq in Pair2) {
#vcf <- readVcf(paste("C:/Bioinformatics/HSV1_genomes/annotation/snippy_0.5-cutoff/MinorVars/Linked_Pairs/",currentseq,"-freebayes.5-reads.vcf",sep=""),"NC_001806.2_HSV1_s17")
vcf <- readVcf(paste(linked.vcf.dir,currentseq,"-freebayes.5-reads.vcf",sep=""),"NC_001806.2_HSV1_s17")
myvcf <- data.frame(info(vcf))
myvcf$position <- as.numeric(gsub("\\_.+$","",gsub("^.+\\:","", rownames(myvcf),perl=T), perl=T))
myvcf <- myvcf[,c("position","NS","DP","AN","RO","AO","SRF","SRR","SAF","SAR")]
colnames(myvcf)[c(3:6)] <- c("Depth","Alleles","RefCount","AltCount")
myvcf$keep <- sapply(1:nrow(myvcf), function(x) ifelse((grepl(",",myvcf$AltCount[x]) ),"drop","keep"))
myvcf$keep <- sapply(1:nrow(myvcf), function(x) ifelse((grepl(",",myvcf$RefCount[x]) ),"drop",myvcf$keep[x]))
myvcf <- subset(myvcf,keep=="keep", select=c(1:ncol(myvcf)-1))
myvcf$Depth2 <- sapply(1:nrow(myvcf), function(x) sum(as.numeric(myvcf$RefCount[x]), as.numeric(myvcf$AltCount[x]))) # depth provided in VCF is missing some reads, so recalculate this
myvcf$refper <- round(((as.numeric(myvcf$RefCount)/as.numeric(myvcf$Depth2))*100),1)
myvcf$altper <- round(((as.numeric(myvcf$AltCount)/as.numeric(myvcf$Depth2))*100),1)
# Produce filter to keep if >50% alt variant
myvcf.minors <- myvcf # keep a backup for pulling out minor vars
myvcf$vartype <- sapply(1:nrow(myvcf), function(x) ifelse(myvcf$altper[x] >=50, "alt","ref" ))
myvcf <- subset(myvcf, vartype=="alt")
# Modify filter to remove minor vars with low coverage
myvcf$vartype <- sapply(1:nrow(myvcf), function(x) ifelse(as.numeric(myvcf$AltCount[x]) <5, "drop",myvcf$vartype[x]))
myvcf <- subset(myvcf, vartype=="alt")
# Add in filter to remove variants not covered by at least one read on each strand
myvcf$vartype <- sapply(1:nrow(myvcf), function(x) ifelse(as.numeric(myvcf$SAF[x]) <1, "drop",myvcf$vartype[x]))
myvcf$vartype <- sapply(1:nrow(myvcf), function(x) ifelse(as.numeric(myvcf$SAR[x]) <1, "drop",myvcf$vartype[x]))
myvcf <- subset(myvcf, vartype=="alt")
# Go back to earlier saved version and produce filter to remove "major variant sites"
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(myvcf.minors$refper[x] >= 98 || myvcf.minors$altper[x] >=98, "major","minor" ))
myvcf.minors <- subset(myvcf.minors, vartype=="minor")
# Modify filter to remove minor vars with low coverage
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$RefCount[x]) <5, "drop",myvcf.minors$vartype[x]))
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$AltCount[x]) <5, "drop",myvcf.minors$vartype[x]))
myvcf.minors <- subset(myvcf.minors, vartype=="minor")
myvcf.minors$majorfreq <- sapply(1:nrow(myvcf.minors), function (x) max(c(as.numeric(myvcf.minors$refper[x]) ,as.numeric(myvcf.minors$altper[x]))))
myvcf.minors$minorfreq <- sapply(1:nrow(myvcf.minors), function (x) min(c(as.numeric(myvcf.minors$refper[x]) ,as.numeric(myvcf.minors$altper[x]))))
# Add in filter to remove minor variants not covered by at least one read on each strand
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$SRF[x]) <1, "drop",myvcf.minors$vartype[x]))
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$SRR[x]) <1, "drop",myvcf.minors$vartype[x]))
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$SAF[x]) <1, "drop",myvcf.minors$vartype[x]))
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$SAR[x]) <1, "drop",myvcf.minors$vartype[x]))
myvcf.minors <- subset(myvcf.minors, vartype=="minor")
# Add test of strand bias, and remove variants that that fail test
#strandbias.cuttoff <- 0.1
#myvcf.minors$RefStrBias <- sapply(1:nrow(myvcf.minors), function(x) round(as.numeric(as.numeric(myvcf.minors$SRF[x])/sum(as.numeric(myvcf.minors$SRF[x]),as.numeric(myvcf.minors$SRR[x]))),2))
#myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$RefStrBias[x]) < strandbias.cuttoff || as.numeric(myvcf.minors$RefStrBias[x]) >1-strandbias.cuttoff, "drop",myvcf.minors$vartype[x]))
#myvcf.minors$AltStrBias <- sapply(1:nrow(myvcf.minors), function(x) round(as.numeric(as.numeric(myvcf.minors$SAF[x])/sum(as.numeric(myvcf.minors$SAF[x]),as.numeric(myvcf.minors$SAR[x]))),2))
#myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$AltStrBias[x]) < strandbias.cuttoff || as.numeric(myvcf.minors$AltStrBias[x]) >>1-strandbias.cuttoff, "drop",myvcf.minors$vartype[x]))
#myvcf.minors <- subset(myvcf.minors, vartype=="minor", select=-c(RefStrBias,AltStrBias))
# Now bring Major and Minor Vars back together
myvar.called <- data.frame(myvcf[,c("position","altper")],stringsAsFactors = F)
colnames(myvar.called)[ncol(myvar.called)] <- currentseq
myvar.collating <- merge(myvar.collating,myvar.called, by.x="position",by.y="position",all.x=T)
myvar.collating[ncol(myvar.collating)] <- sapply(1:nrow(myvar.collating), function(x) ifelse(is.na(myvar.collating[x,ncol(myvar.collating)]),0,1))
myvcf.minors.called <- data.frame(myvcf.minors[,c("position","altper")],stringsAsFactors = F)
colnames(myvcf.minors.called)[ncol(myvcf.minors.called)] <- paste(currentseq,".altper", sep="")
myvar.collating <- merge(myvar.collating,myvcf.minors.called, by.x="position",by.y="position",all.x=T)
}
Pair2
genomelength <- 152222
myvar.collating <- data.frame(c(1:genomelength),stringsAsFactors = F)
colnames(myvar.collating) <- "position"
currentseq
#vcf <- readVcf(paste("C:/Bioinformatics/HSV1_genomes/annotation/snippy_0.5-cutoff/MinorVars/Linked_Pairs/",currentseq,"-freebayes.5-reads.vcf",sep=""),"NC_001806.2_HSV1_s17")
vcf <- readVcf(paste(linked.vcf.dir,currentseq,"-freebayes.5-reads.vcf",sep=""),"NC_001806.2_HSV1_s17")
View(vcf)
linked.vcf.dir
linked.vcf.dir
dev.off()
paste(linked.vcf.dir,currentseq,"-freebayes.5-reads.vcf",sep="")
#vcf <- readVcf(paste("C:/Bioinformatics/HSV1_genomes/annotation/snippy_0.5-cutoff/MinorVars/Linked_Pairs/",currentseq,"-freebayes.5-reads.vcf",sep=""),"NC_001806.2_HSV1_s17")
vcf <- readVcf(paste(linked.vcf.dir,currentseq,"-freebayes.5-reads.vcf",sep=""),"NC_001806.2_HSV1_s17")
Pair4
currentseq
for (currentseq in Pair4) {
#vcf <- readVcf(paste("C:/Bioinformatics/HSV1_genomes/annotation/snippy_0.5-cutoff/MinorVars/Linked_Pairs/",currentseq,"-freebayes.5-reads.vcf",sep=""),"NC_001806.2_HSV1_s17")
vcf <- readVcf(paste(linked.vcf.dir,currentseq,"-freebayes.5-reads.vcf",sep=""),"NC_001806.2_HSV1_s17")
myvcf <- data.frame(info(vcf))
myvcf$position <- as.numeric(gsub("\\_.+$","",gsub("^.+\\:","", rownames(myvcf),perl=T), perl=T))
myvcf <- myvcf[,c("position","NS","DP","AN","RO","AO","SRF","SRR","SAF","SAR")]
colnames(myvcf)[c(3:6)] <- c("Depth","Alleles","RefCount","AltCount")
myvcf$keep <- sapply(1:nrow(myvcf), function(x) ifelse((grepl(",",myvcf$AltCount[x]) ),"drop","keep"))
myvcf$keep <- sapply(1:nrow(myvcf), function(x) ifelse((grepl(",",myvcf$RefCount[x]) ),"drop",myvcf$keep[x]))
myvcf <- subset(myvcf,keep=="keep", select=c(1:ncol(myvcf)-1))
myvcf$Depth2 <- sapply(1:nrow(myvcf), function(x) sum(as.numeric(myvcf$RefCount[x]), as.numeric(myvcf$AltCount[x]))) # depth provided in VCF is missing some reads, so recalculate this
myvcf$refper <- round(((as.numeric(myvcf$RefCount)/as.numeric(myvcf$Depth2))*100),1)
myvcf$altper <- round(((as.numeric(myvcf$AltCount)/as.numeric(myvcf$Depth2))*100),1)
# Produce filter to keep if >50% alt variant
myvcf.minors <- myvcf # keep a backup for pulling out minor vars
myvcf$vartype <- sapply(1:nrow(myvcf), function(x) ifelse(myvcf$altper[x] >=50, "alt","ref" ))
myvcf <- subset(myvcf, vartype=="alt")
# Modify filter to remove minor vars with low coverage
myvcf$vartype <- sapply(1:nrow(myvcf), function(x) ifelse(as.numeric(myvcf$AltCount[x]) <5, "drop",myvcf$vartype[x]))
myvcf <- subset(myvcf, vartype=="alt")
# Add in filter to remove variants not covered by at least one read on each strand
myvcf$vartype <- sapply(1:nrow(myvcf), function(x) ifelse(as.numeric(myvcf$SAF[x]) <1, "drop",myvcf$vartype[x]))
myvcf$vartype <- sapply(1:nrow(myvcf), function(x) ifelse(as.numeric(myvcf$SAR[x]) <1, "drop",myvcf$vartype[x]))
myvcf <- subset(myvcf, vartype=="alt")
# Go back to earlier saved version and produce filter to remove "major variant sites"
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(myvcf.minors$refper[x] >= 98 || myvcf.minors$altper[x] >=98, "major","minor" ))
myvcf.minors <- subset(myvcf.minors, vartype=="minor")
# Modify filter to remove minor vars with low coverage
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$RefCount[x]) <5, "drop",myvcf.minors$vartype[x]))
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$AltCount[x]) <5, "drop",myvcf.minors$vartype[x]))
myvcf.minors <- subset(myvcf.minors, vartype=="minor")
myvcf.minors$majorfreq <- sapply(1:nrow(myvcf.minors), function (x) max(c(as.numeric(myvcf.minors$refper[x]) ,as.numeric(myvcf.minors$altper[x]))))
myvcf.minors$minorfreq <- sapply(1:nrow(myvcf.minors), function (x) min(c(as.numeric(myvcf.minors$refper[x]) ,as.numeric(myvcf.minors$altper[x]))))
# Add in filter to remove minor variants not covered by at least one read on each strand
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$SRF[x]) <1, "drop",myvcf.minors$vartype[x]))
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$SRR[x]) <1, "drop",myvcf.minors$vartype[x]))
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$SAF[x]) <1, "drop",myvcf.minors$vartype[x]))
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$SAR[x]) <1, "drop",myvcf.minors$vartype[x]))
myvcf.minors <- subset(myvcf.minors, vartype=="minor")
# Add test of strand bias, and remove variants that that fail test
#strandbias.cuttoff <- 0.1
#myvcf.minors$RefStrBias <- sapply(1:nrow(myvcf.minors), function(x) round(as.numeric(as.numeric(myvcf.minors$SRF[x])/sum(as.numeric(myvcf.minors$SRF[x]),as.numeric(myvcf.minors$SRR[x]))),2))
#myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$RefStrBias[x]) < strandbias.cuttoff || as.numeric(myvcf.minors$RefStrBias[x]) >1-strandbias.cuttoff, "drop",myvcf.minors$vartype[x]))
#myvcf.minors$AltStrBias <- sapply(1:nrow(myvcf.minors), function(x) round(as.numeric(as.numeric(myvcf.minors$SAF[x])/sum(as.numeric(myvcf.minors$SAF[x]),as.numeric(myvcf.minors$SAR[x]))),2))
#myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$AltStrBias[x]) < strandbias.cuttoff || as.numeric(myvcf.minors$AltStrBias[x]) >>1-strandbias.cuttoff, "drop",myvcf.minors$vartype[x]))
#myvcf.minors <- subset(myvcf.minors, vartype=="minor", select=-c(RefStrBias,AltStrBias))
# Now bring Major and Minor Vars back together
myvar.called <- data.frame(myvcf[,c("position","altper")],stringsAsFactors = F)
colnames(myvar.called)[ncol(myvar.called)] <- currentseq
myvar.collating <- merge(myvar.collating,myvar.called, by.x="position",by.y="position",all.x=T)
myvar.collating[ncol(myvar.collating)] <- sapply(1:nrow(myvar.collating), function(x) ifelse(is.na(myvar.collating[x,ncol(myvar.collating)]),0,1))
myvcf.minors.called <- data.frame(myvcf.minors[,c("position","altper")],stringsAsFactors = F)
colnames(myvcf.minors.called)[ncol(myvcf.minors.called)] <- paste(currentseq,".altper", sep="")
myvar.collating <- merge(myvar.collating,myvcf.minors.called, by.x="position",by.y="position",all.x=T)
}
for (currentseq in Pair1) {
#vcf <- readVcf(paste("C:/Bioinformatics/HSV1_genomes/annotation/snippy_0.5-cutoff/MinorVars/Linked_Pairs/",currentseq,"-freebayes.5-reads.vcf",sep=""),"NC_001806.2_HSV1_s17")
vcf <- readVcf(paste(linked.vcf.dir,currentseq,"-freebayes.5-reads.vcf",sep=""),"NC_001806.2_HSV1_s17")
myvcf <- data.frame(info(vcf))
myvcf$position <- as.numeric(gsub("\\_.+$","",gsub("^.+\\:","", rownames(myvcf),perl=T), perl=T))
myvcf <- myvcf[,c("position","NS","DP","AN","RO","AO","SRF","SRR","SAF","SAR")]
colnames(myvcf)[c(3:6)] <- c("Depth","Alleles","RefCount","AltCount")
myvcf$keep <- sapply(1:nrow(myvcf), function(x) ifelse((grepl(",",myvcf$AltCount[x]) ),"drop","keep"))
myvcf$keep <- sapply(1:nrow(myvcf), function(x) ifelse((grepl(",",myvcf$RefCount[x]) ),"drop",myvcf$keep[x]))
myvcf <- subset(myvcf,keep=="keep", select=c(1:ncol(myvcf)-1))
myvcf$Depth2 <- sapply(1:nrow(myvcf), function(x) sum(as.numeric(myvcf$RefCount[x]), as.numeric(myvcf$AltCount[x]))) # depth provided in VCF is missing some reads, so recalculate this
myvcf$refper <- round(((as.numeric(myvcf$RefCount)/as.numeric(myvcf$Depth2))*100),1)
myvcf$altper <- round(((as.numeric(myvcf$AltCount)/as.numeric(myvcf$Depth2))*100),1)
# Produce filter to keep if >50% alt variant
myvcf.minors <- myvcf # keep a backup for pulling out minor vars
myvcf$vartype <- sapply(1:nrow(myvcf), function(x) ifelse(myvcf$altper[x] >=50, "alt","ref" ))
myvcf <- subset(myvcf, vartype=="alt")
# Modify filter to remove minor vars with low coverage
myvcf$vartype <- sapply(1:nrow(myvcf), function(x) ifelse(as.numeric(myvcf$AltCount[x]) <5, "drop",myvcf$vartype[x]))
myvcf <- subset(myvcf, vartype=="alt")
# Add in filter to remove variants not covered by at least one read on each strand
myvcf$vartype <- sapply(1:nrow(myvcf), function(x) ifelse(as.numeric(myvcf$SAF[x]) <1, "drop",myvcf$vartype[x]))
myvcf$vartype <- sapply(1:nrow(myvcf), function(x) ifelse(as.numeric(myvcf$SAR[x]) <1, "drop",myvcf$vartype[x]))
myvcf <- subset(myvcf, vartype=="alt")
# Go back to earlier saved version and produce filter to remove "major variant sites"
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(myvcf.minors$refper[x] >= 98 || myvcf.minors$altper[x] >=98, "major","minor" ))
myvcf.minors <- subset(myvcf.minors, vartype=="minor")
# Modify filter to remove minor vars with low coverage
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$RefCount[x]) <5, "drop",myvcf.minors$vartype[x]))
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$AltCount[x]) <5, "drop",myvcf.minors$vartype[x]))
myvcf.minors <- subset(myvcf.minors, vartype=="minor")
myvcf.minors$majorfreq <- sapply(1:nrow(myvcf.minors), function (x) max(c(as.numeric(myvcf.minors$refper[x]) ,as.numeric(myvcf.minors$altper[x]))))
myvcf.minors$minorfreq <- sapply(1:nrow(myvcf.minors), function (x) min(c(as.numeric(myvcf.minors$refper[x]) ,as.numeric(myvcf.minors$altper[x]))))
# Add in filter to remove minor variants not covered by at least one read on each strand
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$SRF[x]) <1, "drop",myvcf.minors$vartype[x]))
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$SRR[x]) <1, "drop",myvcf.minors$vartype[x]))
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$SAF[x]) <1, "drop",myvcf.minors$vartype[x]))
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$SAR[x]) <1, "drop",myvcf.minors$vartype[x]))
myvcf.minors <- subset(myvcf.minors, vartype=="minor")
# Add test of strand bias, and remove variants that that fail test
#strandbias.cuttoff <- 0.1
#myvcf.minors$RefStrBias <- sapply(1:nrow(myvcf.minors), function(x) round(as.numeric(as.numeric(myvcf.minors$SRF[x])/sum(as.numeric(myvcf.minors$SRF[x]),as.numeric(myvcf.minors$SRR[x]))),2))
#myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$RefStrBias[x]) < strandbias.cuttoff || as.numeric(myvcf.minors$RefStrBias[x]) >1-strandbias.cuttoff, "drop",myvcf.minors$vartype[x]))
#myvcf.minors$AltStrBias <- sapply(1:nrow(myvcf.minors), function(x) round(as.numeric(as.numeric(myvcf.minors$SAF[x])/sum(as.numeric(myvcf.minors$SAF[x]),as.numeric(myvcf.minors$SAR[x]))),2))
#myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$AltStrBias[x]) < strandbias.cuttoff || as.numeric(myvcf.minors$AltStrBias[x]) >>1-strandbias.cuttoff, "drop",myvcf.minors$vartype[x]))
#myvcf.minors <- subset(myvcf.minors, vartype=="minor", select=-c(RefStrBias,AltStrBias))
# Now bring Major and Minor Vars back together
myvar.called <- data.frame(myvcf[,c("position","altper")],stringsAsFactors = F)
colnames(myvar.called)[ncol(myvar.called)] <- currentseq
myvar.collating <- merge(myvar.collating,myvar.called, by.x="position",by.y="position",all.x=T)
myvar.collating[ncol(myvar.collating)] <- sapply(1:nrow(myvar.collating), function(x) ifelse(is.na(myvar.collating[x,ncol(myvar.collating)]),0,1))
myvcf.minors.called <- data.frame(myvcf.minors[,c("position","altper")],stringsAsFactors = F)
colnames(myvcf.minors.called)[ncol(myvcf.minors.called)] <- paste(currentseq,".altper", sep="")
myvar.collating <- merge(myvar.collating,myvcf.minors.called, by.x="position",by.y="position",all.x=T)
}
if(!require(Cairo)){
install.packages("Cairo",repos="http://www.stats.bris.ac.uk/R/")
library("Cairo")
}
if(!require(ggplot2)){
install.packages("ggplot2",repos="http://www.stats.bris.ac.uk/R/")
library(ggplot2)
}
if(!require(seqinr)){
install.packages("seqinr",repos="http://www.stats.bris.ac.uk/R/")
library(seqinr)
}
if(!require(reshape2)){
install.packages("reshape2",repos="http://www.stats.bris.ac.uk/R/")
library("reshape2")
}
if(!require(gridExtra)){
install.packages("gridExtra",repos="http://www.stats.bris.ac.uk/R/")
library(gridExtra)
}
if(!require(gridExtra)){
install.packages("gridExtra",repos="http://www.stats.bris.ac.uk/R/")
library("gridExtra")
}
if(!require(grid)){
install.packages("grid",repos="http://www.stats.bris.ac.uk/R/")
library("grid")
}
#source("https://bioconductor.org/biocLite.R")
#biocLite("VariantAnnotation")
#biocLite("GenomicFeatures")
#biocLite("BSgenome")
#if (!requireNamespace("BiocManager", quietly = TRUE))
#  install.packages("BiocManager")
#BiocManager::install("VariantAnnotation")
#BiocManager::install("GenomicFeatures")
#BiocManager::install("BSgenome")
#BiocManager::install("limma")
library("VariantAnnotation")
library("GenomicFeatures")
library("BSgenome")
linked.vcf.dir <- "/Users/mb29/hsv1/freebayes-vcfs/Linked_Pairs/"
Pair1 <- c("HSV1-nCSF1","HSV1-nCSF3")
Pair2 <- c("HSV1-nCSF10","HSV1-nCSF9")
Pair3 <- c("HSV1-CSF4","HSV1-CSF7","HSV1-CSF8")
Pair4 <- c("HSV1-CSF5","HSV1-CSF6")
#HSV1-nCSF9-freebayes.MinorVars.freebayes.txt
genomelength <- 152222
myvar.collating <- data.frame(c(1:genomelength),stringsAsFactors = F)
colnames(myvar.collating) <- "position"
for (currentseq in Pair1) {
#vcf <- readVcf(paste("C:/Bioinformatics/HSV1_genomes/annotation/snippy_0.5-cutoff/MinorVars/Linked_Pairs/",currentseq,"-freebayes.5-reads.vcf",sep=""),"NC_001806.2_HSV1_s17")
vcf <- readVcf(paste(linked.vcf.dir,currentseq,"-freebayes.5-reads.vcf",sep=""),"NC_001806.2_HSV1_s17")
myvcf <- data.frame(info(vcf))
myvcf$position <- as.numeric(gsub("\\_.+$","",gsub("^.+\\:","", rownames(myvcf),perl=T), perl=T))
myvcf <- myvcf[,c("position","NS","DP","AN","RO","AO","SRF","SRR","SAF","SAR")]
colnames(myvcf)[c(3:6)] <- c("Depth","Alleles","RefCount","AltCount")
myvcf$keep <- sapply(1:nrow(myvcf), function(x) ifelse((grepl(",",myvcf$AltCount[x]) ),"drop","keep"))
myvcf$keep <- sapply(1:nrow(myvcf), function(x) ifelse((grepl(",",myvcf$RefCount[x]) ),"drop",myvcf$keep[x]))
myvcf <- subset(myvcf,keep=="keep", select=c(1:ncol(myvcf)-1))
myvcf$Depth2 <- sapply(1:nrow(myvcf), function(x) sum(as.numeric(myvcf$RefCount[x]), as.numeric(myvcf$AltCount[x]))) # depth provided in VCF is missing some reads, so recalculate this
myvcf$refper <- round(((as.numeric(myvcf$RefCount)/as.numeric(myvcf$Depth2))*100),1)
myvcf$altper <- round(((as.numeric(myvcf$AltCount)/as.numeric(myvcf$Depth2))*100),1)
# Produce filter to keep if >50% alt variant
myvcf.minors <- myvcf # keep a backup for pulling out minor vars
myvcf$vartype <- sapply(1:nrow(myvcf), function(x) ifelse(myvcf$altper[x] >=50, "alt","ref" ))
myvcf <- subset(myvcf, vartype=="alt")
# Modify filter to remove minor vars with low coverage
myvcf$vartype <- sapply(1:nrow(myvcf), function(x) ifelse(as.numeric(myvcf$AltCount[x]) <5, "drop",myvcf$vartype[x]))
myvcf <- subset(myvcf, vartype=="alt")
# Add in filter to remove variants not covered by at least one read on each strand
myvcf$vartype <- sapply(1:nrow(myvcf), function(x) ifelse(as.numeric(myvcf$SAF[x]) <1, "drop",myvcf$vartype[x]))
myvcf$vartype <- sapply(1:nrow(myvcf), function(x) ifelse(as.numeric(myvcf$SAR[x]) <1, "drop",myvcf$vartype[x]))
myvcf <- subset(myvcf, vartype=="alt")
# Go back to earlier saved version and produce filter to remove "major variant sites"
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(myvcf.minors$refper[x] >= 98 || myvcf.minors$altper[x] >=98, "major","minor" ))
myvcf.minors <- subset(myvcf.minors, vartype=="minor")
# Modify filter to remove minor vars with low coverage
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$RefCount[x]) <5, "drop",myvcf.minors$vartype[x]))
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$AltCount[x]) <5, "drop",myvcf.minors$vartype[x]))
myvcf.minors <- subset(myvcf.minors, vartype=="minor")
myvcf.minors$majorfreq <- sapply(1:nrow(myvcf.minors), function (x) max(c(as.numeric(myvcf.minors$refper[x]) ,as.numeric(myvcf.minors$altper[x]))))
myvcf.minors$minorfreq <- sapply(1:nrow(myvcf.minors), function (x) min(c(as.numeric(myvcf.minors$refper[x]) ,as.numeric(myvcf.minors$altper[x]))))
# Add in filter to remove minor variants not covered by at least one read on each strand
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$SRF[x]) <1, "drop",myvcf.minors$vartype[x]))
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$SRR[x]) <1, "drop",myvcf.minors$vartype[x]))
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$SAF[x]) <1, "drop",myvcf.minors$vartype[x]))
myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$SAR[x]) <1, "drop",myvcf.minors$vartype[x]))
myvcf.minors <- subset(myvcf.minors, vartype=="minor")
# Add test of strand bias, and remove variants that that fail test
#strandbias.cuttoff <- 0.1
#myvcf.minors$RefStrBias <- sapply(1:nrow(myvcf.minors), function(x) round(as.numeric(as.numeric(myvcf.minors$SRF[x])/sum(as.numeric(myvcf.minors$SRF[x]),as.numeric(myvcf.minors$SRR[x]))),2))
#myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$RefStrBias[x]) < strandbias.cuttoff || as.numeric(myvcf.minors$RefStrBias[x]) >1-strandbias.cuttoff, "drop",myvcf.minors$vartype[x]))
#myvcf.minors$AltStrBias <- sapply(1:nrow(myvcf.minors), function(x) round(as.numeric(as.numeric(myvcf.minors$SAF[x])/sum(as.numeric(myvcf.minors$SAF[x]),as.numeric(myvcf.minors$SAR[x]))),2))
#myvcf.minors$vartype <- sapply(1:nrow(myvcf.minors), function(x) ifelse(as.numeric(myvcf.minors$AltStrBias[x]) < strandbias.cuttoff || as.numeric(myvcf.minors$AltStrBias[x]) >>1-strandbias.cuttoff, "drop",myvcf.minors$vartype[x]))
#myvcf.minors <- subset(myvcf.minors, vartype=="minor", select=-c(RefStrBias,AltStrBias))
# Now bring Major and Minor Vars back together
myvar.called <- data.frame(myvcf[,c("position","altper")],stringsAsFactors = F)
colnames(myvar.called)[ncol(myvar.called)] <- currentseq
myvar.collating <- merge(myvar.collating,myvar.called, by.x="position",by.y="position",all.x=T)
myvar.collating[ncol(myvar.collating)] <- sapply(1:nrow(myvar.collating), function(x) ifelse(is.na(myvar.collating[x,ncol(myvar.collating)]),0,1))
myvcf.minors.called <- data.frame(myvcf.minors[,c("position","altper")],stringsAsFactors = F)
colnames(myvcf.minors.called)[ncol(myvcf.minors.called)] <- paste(currentseq,".altper", sep="")
myvar.collating <- merge(myvar.collating,myvcf.minors.called, by.x="position",by.y="position",all.x=T)
}
if(!require(Cairo)){
install.packages("Cairo",repos="http://www.stats.bris.ac.uk/R/")
library("Cairo")
}
if(!require(ggplot2)){
install.packages("ggplot2",repos="http://www.stats.bris.ac.uk/R/")
library(ggplot2)
}
if(!require(seqinr)){
install.packages("seqinr",repos="http://www.stats.bris.ac.uk/R/")
library(seqinr)
}
if(!require(reshape2)){
install.packages("reshape2",repos="http://www.stats.bris.ac.uk/R/")
library("reshape2")
}
if(!require(gridExtra)){
install.packages("gridExtra",repos="http://www.stats.bris.ac.uk/R/")
library(gridExtra)
}
if(!require(gridExtra)){
install.packages("gridExtra",repos="http://www.stats.bris.ac.uk/R/")
library("gridExtra")
}
if(!require(grid)){
install.packages("grid",repos="http://www.stats.bris.ac.uk/R/")
library("grid")
}
library("VariantAnnotation")
library("GenomicFeatures")
library("BSgenome")
linked.vcf.dir <- "/Users/mb29/hsv1/freebayes-vcfs/Linked_Pairs/"
Pair1 <- c("HSV1-nCSF1","HSV1-nCSF3")
Pair2 <- c("HSV1-nCSF10","HSV1-nCSF9")
Pair3 <- c("HSV1-CSF4","HSV1-CSF7","HSV1-CSF8")
Pair4 <- c("HSV1-CSF5","HSV1-CSF6")
currentseq
readVcf(paste(linked.vcf.dir,currentseq,"-freebayes.5-reads.vcf",sep=""),"NC_001806.2_HSV1_s17")
#vcf <- readVcf(paste("C:/Bioinformatics/HSV1_genomes/annotation/snippy_0.5-cutoff/MinorVars/Linked_Pairs/",currentseq,"-freebayes.5-reads.vcf",sep=""),"NC_001806.2_HSV1_s17")
vcf <- readVcf(paste(linked.vcf.dir,currentseq,"-freebayes.5-reads.vcf",sep=""),"NC_001806.2_HSV1_s17")
View(vcf)
paste(linked.vcf.dir,currentseq,"-freebayes.5-reads.vcf",sep="")
paste(linked.vcf.dir,currentseq,"-freebayes.5-reads.vcf",sep="")
